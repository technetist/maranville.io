---
interface Props {
	href: string;
	icon: string;
}

type SimpleIconModule = {
	[key: string]: any;
};

const {href, icon} = Astro.props;

let Icon: SimpleIconModule[keyof SimpleIconModule] | undefined;

try {
	Icon = await import('simple-icons-astro').then((mod: SimpleIconModule) => {
		if (icon in mod) {
			return mod[icon as keyof typeof mod];
		} else {
			throw new Error(`Icon "${icon}" not found.`);
		}
	});
} catch (error) {
	if (error instanceof Error) {
		console.error(error.message);
	} else {
		console.error('An unknown error occurred.');
	}

	// Fallback to a default icon
	Icon = await import('simple-icons-astro').then((mod) => mod.Simpleicons);
}

const isValidIcon = typeof Icon === 'function' || typeof Icon === 'object';
---

<a href={href}
   target="_blank"
   class="h-10 w-10 rounded border-purple border-2 flex items-center justify-center shadow-[2px_2px_0px_0px_rgba(189,147,249,1)] hover:text-purple hover:border-purple hover:cursor-pointer active:shadow-none active:translate-x-1 active:translate-y-1">
	{isValidIcon ?
		  <Icon/> : null}
</a>
